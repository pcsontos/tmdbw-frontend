# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
}

directive @cacheControl(maxAge: Int, scope: CacheControlScope) on OBJECT | FIELD_DEFINITION | INTERFACE

directive @formatNumber(defaultFormat: String = "0,0.0000") on FIELD_DEFINITION

directive @formatDate(defaultFormat: String = "mmmm d, yyyy") on FIELD_DEFINITION

directive @camelCase on FIELD_DEFINITION

directive @capitalize on FIELD_DEFINITION

directive @deburr on FIELD_DEFINITION

directive @kebabCase on FIELD_DEFINITION

directive @lowerCase on FIELD_DEFINITION

directive @lowerFirst on FIELD_DEFINITION

directive @snakeCase on FIELD_DEFINITION

directive @toLower on FIELD_DEFINITION

directive @toUpper on FIELD_DEFINITION

directive @trim on FIELD_DEFINITION

directive @upperCase on FIELD_DEFINITION

directive @upperFirst on FIELD_DEFINITION

interface Image {
  "A hash of extracted colors from the image."
  colors: ExtractedColors
  "Returns a URL for an image with the given dimensions or a generated SVG as either a URL or a base64 encoded data URI."
  custom(base64: Boolean, color: Palette, size: String, svg: Boolean): URL
  "The filename of the image. Used to construct URLs given a base URL and a size."
  file: String
  "Returns a URL for an image in it's original size or a generated SVG as either a URL or a base64 encoded data URI."
  original(base64: Boolean, color: Palette, svg: Boolean): URL
  "Returns either a URL to or a base64 encoded data URI of the image."
  svg(base64: Boolean, color: Palette, size: String): URL
}

union CreditType = Cast | Crew

union Media = Movie | TV

union MediaImage = Backdrop | Poster

union SearchResult = Movie | Person | TV

type Backdrop implements Image {
  colors: ExtractedColors
  custom(base64: Boolean, color: Palette, size: String, svg: Boolean): URL
  file: String
  "w1280"
  large: URL
  "w780"
  medium: URL
  original(base64: Boolean, color: Palette, svg: Boolean): URL
  "w300"
  small: URL
  svg(base64: Boolean, color: Palette, size: String): URL
}

type Cast {
  character: String!
  credit: Credit!
}

type Collection {
  backdrop: Backdrop
  id: ID!
  images: [MediaImage!]!
  name: String!
  overview: String!
  parts(language: Translations): [Movie!]!
  poster: Poster
}

type Company {
  country: Country!
  description: String!
  headquarters: String!
  homepage: URL!
  id: ID!
  images: [Logo!]!
  logo: Logo!
  name: String!
  parentCompany: Company
}

type Country {
  code: String!
  name: String!
}

type Credit {
  id: ID!
  media: Media!
  person: Person
  role: CreditType!
}

type Crew {
  credit: Credit!
  department: String!
  job: String!
}

type Episode {
  aired: DateTime!
  cast(limit: Int): [Credit!]!
  crew(limit: Int): [Credit!]!
  guests(limit: Int): [Credit!]!
  id: ID!
  images: [Still!]!
  name: String!
  number: Int!
  overview: String!
  score: Float!
  season: Season!
  series: TV!
  still: Still
  videos(filter: VideoFilter, first: Int, language: Translations): [Video!]!
  votes: Int!
}

type ExtractedColors {
  darkMuted: [Int]
  darkVibrant: [Int]
  lightMuted: [Int]
  lightVibrant: [Int]
  muted: [Int]
  vibrant: [Int]
}

type Genre {
  id: ID!
  name: String!
}

type Job {
  department: String!
  name: String!
}

type Keyword {
  id: ID!
  name: String!
}

type Language {
  code: String!
  name: String!
}

type Logo implements Image {
  colors: ExtractedColors
  custom(base64: Boolean, color: Palette, size: String, svg: Boolean): URL
  file: String
  "w500"
  huge: URL
  "w45"
  icon: URL
  "w300"
  large: URL
  "w185"
  medium: URL
  original(base64: Boolean, color: Palette, svg: Boolean): URL
  "w154"
  small: URL
  svg(base64: Boolean, color: Palette, size: String): URL
  "w92"
  tiny: URL
}

type Movie {
  adult: Boolean!
  backdrop: Backdrop
  budget: Int!
  cast(limit: Int): [Credit!]!
  collection(language: Translations): Collection
  country: [Country!]!
  crew(limit: Int): [Credit!]!
  genres: [Genre!]!
  homepage: URL
  id: ID!
  images: [MediaImage!]!
  keywords: [Keyword!]!
  languages: [Language!]!
  name: String!
  overview: String!
  popularity: Float!
  poster: Poster
  productionCompanies: [Company!]!
  recommended(language: Translations, limit: Int, page: PageRange = 1): [Movie!]!
  releaseDate: DateTime
  revenue: String!
  reviews(language: Translations, limit: Int, page: PageRange = 1): [Review!]!
  runtime: Int
  score: Float!
  similar(language: Translations, limit: Int, page: PageRange = 1): [Movie!]!
  socialMedia: SocialMedia
  status: ReleaseStatus!
  tagline: String
  videos(filter: VideoFilter, first: Int, language: Translations): [Video!]!
  votes: Int!
}

type Network {
  country: String!
  headquarters: String!
  homepage: URL!
  id: ID!
  images: [Logo!]!
  name: String!
}

type Person {
  adult: Boolean!
  aliases: [String!]!
  appearsIn(limit: Int): [Media!]!
  biography: String!
  birthday: DateTime
  birthplace: String
  credits(limit: Int, type: [MediaType!]!): [Credit!]!
  diedOn: DateTime
  gender: Gender!
  homepage: URL
  id: ID!
  images: [Photo!]!
  knownFor: String!
  name: String!
  photo: Photo!
  socialMedia: SocialMedia
  taggedImages: [MediaImage!]!
  workedOn(limit: Int): [Media!]!
}

type Photo implements Image {
  colors: ExtractedColors
  custom(base64: Boolean, color: Palette, size: String, svg: Boolean): URL
  file: String
  "h632"
  large: URL
  "w185"
  medium: URL
  original(base64: Boolean, color: Palette, svg: Boolean): URL
  "w45"
  small: URL
  svg(base64: Boolean, color: Palette, size: String): URL
}

type Poster implements Image {
  colors: ExtractedColors
  custom(base64: Boolean, color: Palette, size: String, svg: Boolean): URL
  file: String
  "w780"
  huge: URL
  "w500"
  large: URL
  "w342"
  medium: URL
  original(base64: Boolean, color: Palette, svg: Boolean): URL
  "w185"
  small: URL
  svg(base64: Boolean, color: Palette, size: String): URL
  "w92"
  thumbnail: URL
  "w154"
  tiny: URL
}

type Query {
  airingThisWeek(language: Translations = English, page: PageRange = 1): [TV!]!
  airingToday(language: Translations = English, page: PageRange = 1): [TV!]!
  collection(id: ID!, language: Translations = English): Collection!
  countries: [Country!]!
  discoverMovies(filter: DiscoverMoviesFilter, language: Translations = English, page: PageRange = 1, sortBy: DiscoverMoviesSortInput): [Movie!]!
  discoverTV(filter: DiscoverTVFilter, language: Translations = English, page: PageRange = 1, sortBy: DiscoverTVSortInput): [TV!]!
  jobs: [Job!]!
  languages: [Language!]!
  latestMovie(language: Translations = English): Movie!
  latestPerson(language: Translations = English): Person!
  latestTV(language: Translations = English): TV!
  movie(id: ID!, language: Translations = English): Movie!
  movieGenres(language: Translations = English): [Genre!]!
  movies(ids: [ID!], language: Translations = English): [Movie!]!
  nowPlaying(language: Translations = English, page: PageRange = 1): [Movie!]!
  people(ids: [ID!], language: Translations = English): [Person!]!
  person(id: ID!, language: Translations = English): Person!
  popularMovies(language: Translations = English, page: PageRange = 1): [Movie!]!
  popularPeople(language: Translations = English, page: PageRange = 1): [Person!]!
  popularTV(language: Translations = English, page: PageRange = 1): [TV!]!
  review(id: ID!): Review!
  reviews(ids: [ID!]): [Review!]!
  search(language: Translations = English, page: PageRange = 1, query: String!): [SearchResult!]!
  searchMovies(language: Translations = English, page: PageRange = 1, query: String!): [Movie!]!
  searchPeople(language: Translations = English, page: PageRange = 1, query: String!): [Person!]!
  searchTV(language: Translations = English, page: PageRange = 1, query: String!): [TV!]!
  shows(ids: [ID!], language: Translations = English): [TV!]!
  timezones: [Timezone!]!
  topRatedMovies(language: Translations = English, page: PageRange = 1): [Movie!]!
  topRatedTV(language: Translations = English, page: PageRange = 1): [TV!]!
  trending(page: PageRange = 1, timeframe: TrendingTimeframe = Day): [SearchResult!]!
  trendingMovies(page: PageRange = 1, timeframe: TrendingTimeframe = Day): [Movie!]!
  trendingPeople(page: PageRange = 1, timeframe: TrendingTimeframe = Day): [Person!]!
  trendingTV(page: PageRange = 1, timeframe: TrendingTimeframe = Day): [TV!]!
  tv(id: ID!, language: Translations = English): TV!
  tvGenres(language: Translations = English): [Genre!]!
  upcomingMovies(language: Translations = English, page: PageRange = 1): [Movie!]!
}

type Review {
  author: String!
  content: String!
  id: ID!
  language: Language
  media: Media!
  url: URL!
}

type Season {
  aired: DateTime!
  cast(limit: Int): [Credit!]!
  crew(limit: Int): [Credit!]!
  episodeCount: Int!
  episodes: [Episode!]!
  id: ID!
  images: [Poster!]!
  name: String!
  number: Int!
  overview: String!
  poster: Poster
  series: TV!
  videos(filter: VideoFilter, first: Int, language: Translations): [Video!]!
}

type SocialMedia {
  facebook: URL
  id: ID!
  imdb: URL
  instagram: URL
  twitter: URL
}

type Still implements Image {
  colors: ExtractedColors
  custom(base64: Boolean, color: Palette, size: String, svg: Boolean): URL
  file: String
  "w300"
  large: URL
  "w185"
  medium: URL
  original(base64: Boolean, color: Palette, svg: Boolean): URL
  "w92"
  small: URL
  svg(base64: Boolean, color: Palette, size: String): URL
}

type TV {
  backdrop: Backdrop
  cast(limit: Int): [Credit!]!
  country: [Country!]!
  createdBy: [Person!]!
  crew(limit: Int): [Credit!]!
  episodeCount: Int!
  episodes: [Episode!]!
  firstAired: DateTime!
  genres: [Genre!]!
  homepage: URL
  id: ID!
  images: [MediaImage!]!
  inProduction: Boolean!
  language: Language!
  languages: [Language!]!
  lastAired: DateTime!
  name: String!
  networks: [Network!]!
  originalName: String!
  overview: String!
  popularity: Float!
  poster: Poster
  productionCompanies: [Company!]!
  recommended(language: Translations, limit: Int, page: PageRange = 1): [TV!]!
  reviews(limit: Int, page: PageRange = 1): [Review!]!
  runtime: [Int!]!
  score: Float!
  seasonCount: Int!
  seasons: [Season!]!
  similar(language: Translations, limit: Int, page: PageRange = 1): [TV!]!
  socialMedia: SocialMedia
  status: TVStatus!
  type: TVType!
  videos(filter: VideoFilter, first: Int, language: Translations): [Video!]!
  votes: Int!
}

type Timezone {
  code: String!
  zone: String!
}

type Video {
  country: Country!
  id: ID!
  key: String!
  language: Language!
  name: String!
  site: String!
  "One of value: 360, 480, 720, 1080"
  size: Int!
  type: VideoType!
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

enum Direction {
  "Ascending, ie: 1..2..3.. or A..B..C.."
  ASC
  "Descending, ie: 3..2..1.. or C..B..A.."
  DESC
}

enum DiscoverMoviesSortBy {
  OriginalTitle
  Popularity
  PrimaryReleaseDate
  ReleaseDate
  Revenue
  VoteAverage
  VoteCount
}

enum DiscoverTVSortBy {
  FirstAirDate
  Popularity
  VoteAverage
}

enum EpisodeVideoType {
  BehindtheScenes
  Bloopers
  Clip
  Featurette
  OpeningCredits
  Recap
  Teaser
  Trailer
}

enum Gender {
  Female
  Male
  Unknown
}

enum Logic {
  AND
  OR
}

enum MediaType {
  Movie
  TV
}

enum MovieVideoType {
  BehindtheScenes
  Bloopers
  Clip
  Featurette
  Teaser
  Trailer
}

enum Palette {
  darkMuted
  darkVibrant
  lightMuted
  lightVibrant
  muted
  vibrant
}

enum ReleaseStatus {
  Canceled
  InProduction
  Planned
  PostProduction
  Released
  Rumored
}

enum SeasonVideoType {
  BehindtheScenes
  Bloopers
  Clip
  Featurette
  OpeningCredits
  Recap
  Teaser
  Trailer
}

enum TVStatus {
  Canceled
  Ended
  InProduction
  Pilot
  Planned
  ReturningSeries
}

enum TVType {
  Documentary
  Miniseries
  News
  Reality
  Scripted
  TalkShow
}

enum TVVideoType {
  BehindtheScenes
  Bloopers
  Clip
  Featurette
  OpeningCredits
  Teaser
  Trailer
}

enum Translations {
  Bangla
  Basque
  BokmalNorwegian
  BrazilianPortuguese
  Bulgarian
  CanadianFrench
  Catalan
  Chamorro
  ChineseSimplified
  ChineseTraditional
  Czech
  Danish
  Dutch
  English
  Esperanto
  Farsi
  Finnish
  French
  Georgian
  German
  Greek
  Hebrew
  Hindi
  Hungarian
  Indonesian
  Italian
  Japanese
  Kannada
  Korean
  Lithuanian
  Malayalam
  MexicanSpanish
  Norwegian
  Polish
  Portuguese
  Romanian
  Russian
  SaudiArabianArabic
  Serbian
  Slovak
  Slovenian
  Spanish
  Swedish
  Tamil
  Telugu
  Thai
  Turkish
  UAEArabic
  Ukrainian
  Vietnamese
}

enum TrendingTimeframe {
  Day
  Week
}

enum VideoType {
  BehindtheScenes
  Bloopers
  Clip
  Featurette
  OpeningCredits
  Recap
  Teaser
  Trailer
}

"Use JavaScript Date object for date/time fields."
scalar DateTime

"A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/."
scalar EmailAddress

"A field whose value matches the provided regular expression /^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])$/."
scalar ISODate

"A field whose value matches the provided regular expression /([a-z]{2})-([A-Z]{2})/."
scalar LanguageCode

"An Integer with a value between 1 and 1000 (inclusive)."
scalar PageRange

"A field whose value matches the provided regular expression /^[A-Z]{2}$/."
scalar RegionCode

"An Integer with a value between 1 and 10 (inclusive)."
scalar ScoreMaximumRange

"An Integer with a value between 0 and 10 (inclusive)."
scalar ScoreMinimumRange

"A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt."
scalar URL

"Used to filter Dates. Has no effect if both inputs are omited."
input DateRangeInput {
  "Include from the given Date forward"
  from: ISODate
  "Include up to the given Date"
  to: ISODate
}

input DiscoverMoviesFilter {
  includeAdult: Boolean
  includeVideo: Boolean
  language: Translations
  primaryReleaseDate: DateRangeInput
  primaryReleaseYear: Int
  region: RegionCode
  releaseDate: DateRangeInput
  voteAverage: VoteAverageInput
  voteCount: NumberRangeInput
  withCast: IDListInput
  withCompanies: IDListInput
  withCrew: IDListInput
  withGenres: IDListInput
  withKeywords: KeywordInput
  withOriginalLanguage: Translations
  withPeople: IDListInput
  withReleaseType: ReleaseTypeInput
  withRuntime: NumberRangeInput
  year: Int
}

input DiscoverMoviesSortInput {
  by: DiscoverMoviesSortBy = Popularity
  direction: Direction = DESC
}

input DiscoverTVFilter {
  airDate: DateRangeInput
  firstAired: DateRangeInput
  firstAiredYear: Int
  includeUnaired: Boolean = false
  language: Translations
  screenedTheatrically: Boolean
  timeZone: String
  voteAverage: VoteAverageInput
  voteCount: NumberRangeInput
  withCompanies: IDListInput
  withGenres: IDListInput
  withKeywords: KeywordInput
  withNetworks: IDListInput
  withOriginalLanguage: Translations
  withRuntime: NumberRangeInput
}

input DiscoverTVSortInput {
  by: DiscoverTVSortBy = Popularity
  direction: Direction = DESC
}

input IDListInput {
  exclude: [ID!]
  include: [ID!]
}

input KeywordInput {
  exclude: [ID!]
  excludeLogic: Logic = AND
  include: [ID!]
  includeLogic: Logic = AND
}

"Used to filter video runtimes in Minutes"
input NumberRangeInput {
  max: Int
  min: Int = 0
}

input ReleaseTypeInput {
  "How to combine the Release Types list, default: OR"
  logic: Logic = OR
  "Duplicate Release Types will be filtered"
  types: [ReleaseStatus!]
}

input VideoFilter {
  site: [String!]
  type: [VideoType!]
}

"Used to filter User Scores by Average Votes"
input VoteAverageInput {
  "Integer between 1 and 10"
  max: ScoreMaximumRange = 10
  "Integer between 0 and 10"
  min: ScoreMinimumRange = 0
}
